{"ast":null,"code":"// // src/components/AudioPlayer.js\n// import \"../styles.css\";\n\n// import React, {useState, useRef, useEffect} from \"react\";\n\n// const AudioPlayer = ({\n// \taudioFiles,\n// \tfileRepeatCount,\n// \talbumRepeatCount,\n// \tisPlaying,\n// \tonStopPlayback,\n// }) => {\n// \tconst [currentFileIndex, setCurrentFileIndex] = useState(0);\n// \tconst [currentAlbumRepeat, setCurrentAlbumRepeat] = useState(0);\n// \tconst [currentFileRepeat, setCurrentFileRepeat] = useState(0);\n// \tconst audioRef = useRef(null);\n\n// \tuseEffect(() => {\n// \t\tif (isPlaying) {\n// \t\t\taudioRef.current.play();\n// \t\t} else {\n// \t\t\taudioRef.current.pause();\n// \t\t}\n// \t}, [isPlaying, currentFileIndex]);\n\n// \tuseEffect(() => {\n// \t\t// Reset playback when the component is re-rendered with a new key\n// \t\tsetCurrentFileIndex(0);\n// \t\tsetCurrentAlbumRepeat(0);\n// \t\tsetCurrentFileRepeat(0);\n// \t}, [audioFiles, fileRepeatCount, albumRepeatCount]);\n\n// \tconst handleEnded = () => {\n// \t\tif (currentFileRepeat + 1 < fileRepeatCount) {\n// \t\t\tsetCurrentFileRepeat(currentFileRepeat + 1);\n// \t\t\taudioRef.current.play();\n// \t\t} else {\n// \t\t\tsetCurrentFileRepeat(0);\n// \t\t\tif (currentFileIndex + 1 < audioFiles.length) {\n// \t\t\t\tsetCurrentFileIndex(currentFileIndex + 1);\n// \t\t\t} else if (currentAlbumRepeat + 1 < albumRepeatCount) {\n// \t\t\t\tsetCurrentFileIndex(0);\n// \t\t\t\tsetCurrentAlbumRepeat(currentAlbumRepeat + 1);\n// \t\t\t} else {\n// \t\t\t\tonStopPlayback();\n// \t\t\t}\n// \t\t}\n// \t};\n\n// \treturn (\n// \t\t<div className=\"flex flex-col\">\n// \t\t\t<audio\n// \t\t\t\tref={audioRef}\n// \t\t\t\tsrc={audioFiles[currentFileIndex]}\n// \t\t\t\tonEnded={handleEnded}\n// \t\t\t\tautoPlay={isPlaying} // Automatically start playing when the component is rendered\n// \t\t\t/>\n// \t\t\t<button\n// \t\t\t\tclassName=\"stop-button py-4 px-4 bg-blue-500 text-white text-base font-medium rounded-lg shadow-sm hover:bg-blue-600 focus:outline-none focus:bg-blue-600 disabled:opacity-50 disabled:pointer-events-none\"\n// \t\t\t\tonClick={onStopPlayback}\n// \t\t\t>\n// \t\t\t\tStop\n// \t\t\t</button>\n// \t\t</div>\n// \t);\n// };\n\n// export default AudioPlayer;","map":{"version":3,"names":[],"sources":["/Users/auvik/Desktop/audiorepeat/src/components/AudioPlayer.js"],"sourcesContent":["// // src/components/AudioPlayer.js\n// import \"../styles.css\";\n\n// import React, {useState, useRef, useEffect} from \"react\";\n\n// const AudioPlayer = ({\n// \taudioFiles,\n// \tfileRepeatCount,\n// \talbumRepeatCount,\n// \tisPlaying,\n// \tonStopPlayback,\n// }) => {\n// \tconst [currentFileIndex, setCurrentFileIndex] = useState(0);\n// \tconst [currentAlbumRepeat, setCurrentAlbumRepeat] = useState(0);\n// \tconst [currentFileRepeat, setCurrentFileRepeat] = useState(0);\n// \tconst audioRef = useRef(null);\n\n// \tuseEffect(() => {\n// \t\tif (isPlaying) {\n// \t\t\taudioRef.current.play();\n// \t\t} else {\n// \t\t\taudioRef.current.pause();\n// \t\t}\n// \t}, [isPlaying, currentFileIndex]);\n\n// \tuseEffect(() => {\n// \t\t// Reset playback when the component is re-rendered with a new key\n// \t\tsetCurrentFileIndex(0);\n// \t\tsetCurrentAlbumRepeat(0);\n// \t\tsetCurrentFileRepeat(0);\n// \t}, [audioFiles, fileRepeatCount, albumRepeatCount]);\n\n// \tconst handleEnded = () => {\n// \t\tif (currentFileRepeat + 1 < fileRepeatCount) {\n// \t\t\tsetCurrentFileRepeat(currentFileRepeat + 1);\n// \t\t\taudioRef.current.play();\n// \t\t} else {\n// \t\t\tsetCurrentFileRepeat(0);\n// \t\t\tif (currentFileIndex + 1 < audioFiles.length) {\n// \t\t\t\tsetCurrentFileIndex(currentFileIndex + 1);\n// \t\t\t} else if (currentAlbumRepeat + 1 < albumRepeatCount) {\n// \t\t\t\tsetCurrentFileIndex(0);\n// \t\t\t\tsetCurrentAlbumRepeat(currentAlbumRepeat + 1);\n// \t\t\t} else {\n// \t\t\t\tonStopPlayback();\n// \t\t\t}\n// \t\t}\n// \t};\n\n// \treturn (\n// \t\t<div className=\"flex flex-col\">\n// \t\t\t<audio\n// \t\t\t\tref={audioRef}\n// \t\t\t\tsrc={audioFiles[currentFileIndex]}\n// \t\t\t\tonEnded={handleEnded}\n// \t\t\t\tautoPlay={isPlaying} // Automatically start playing when the component is rendered\n// \t\t\t/>\n// \t\t\t<button\n// \t\t\t\tclassName=\"stop-button py-4 px-4 bg-blue-500 text-white text-base font-medium rounded-lg shadow-sm hover:bg-blue-600 focus:outline-none focus:bg-blue-600 disabled:opacity-50 disabled:pointer-events-none\"\n// \t\t\t\tonClick={onStopPlayback}\n// \t\t\t>\n// \t\t\t\tStop\n// \t\t\t</button>\n// \t\t</div>\n// \t);\n// };\n\n// export default AudioPlayer;\n"],"mappings":"AAAA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}